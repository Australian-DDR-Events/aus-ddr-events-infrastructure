version: 2.1
orbs:
  jira: circleci/jira@1.3.0
  aws-cli: circleci/aws-cli@2.0.6
jobs:
  build_resources:
    working_directory: ~/aus-ddr-events-infrastructure
    docker:
      - image: cimg/base:2020.01
    resource_class: medium
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: "Build resources"
          command: |
            ./build_resources.sh
      - persist_to_workspace:
          root: ~/aus-ddr-events-infrastructure
          paths:
            - resources_out
  deploy:
    working_directory: ~/aus-ddr-events-infrastructure
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
    resource_class: medium
    steps:
      - run:
          name: "Install unzip"
          command: |
            apt update -y
            apt install zip unzip -y
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_REGION
      - checkout
      - attach_workspace:
          at: ~/aus-ddr-events-infrastructure
      - run:
          name: "Install dependencies"
          command: |
            dotnet restore ./src/CognitoEnhanced.sln
            apt update -y
            apt install nodejs npm -y
            npm install -g npm@latest
            npm install -g aws-cdk
      - run:
          name: "Execute CDK"
          command: |
            cdk synthesize -c env="${ENVIRONMENT}" "${ENVIRONMENT}-cognito-enhanced-stack" "${ENVIRONMENT}-webapp-stack"  "${ENVIRONMENT}-cdn-stack" "${ENVIRONMENT}-ec2app-stack"
            cdk bootstrap -c env="${ENVIRONMENT}"
            cdk deploy -c env="${ENVIRONMENT}" --progress bar "${ENVIRONMENT}-cognito-enhanced-stack" "${ENVIRONMENT}-webapp-stack" "${ENVIRONMENT}-cdn-stack" "${ENVIRONMENT}-ec2app-stack"

workflows:
  build_and_deploy:
    jobs:
    - build_resources:
        name: build-resources-staging
        context:
        - staging
        filters:
          branches:
            only: master
    - deploy:
        name: deploy-staging
        context:
        - staging
        filters:
          branches:
            only: master
        requires:
          - build-resources-staging
    - block_production:
        type: approval
        requires:
          - deploy-staging
    - deploy:
        name: deploy-production
        context:
        - production
        filters:
          branches:
            only: master
        requires:
        - block_production